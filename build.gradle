import proguard.gradle.ProGuardTask

// Настройки для всех проектов
allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.jetbrains:annotations:16.0.2'
    }

    group = 'ru.spliterash'
    version = '3.0'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    jar {
        from {
            def projectClasses = configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
            def subProject = subprojects.collect { p ->
                p.jar.outputs.files.getFiles().collect {
                    it.isDirectory() ? it : zipTree(it)
                }
            }
            return projectClasses + subProject
        }.exclude('META-INF', 'META-INF/**')
    }


}
//Для сабпроектов, чтоб видели этот
subprojects {
    dependencies {
        compileOnly parent
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'com.j256.ormlite:ormlite-jdbc:5.1'
    compileOnly 'com.google.code.gson:gson:2.8.0'
    compile 'org.apache.httpcomponents:httpmime:4.5.8'
    compileOnly 'log4j:log4j:1.2.17'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.13.3'
}
//Зона proguard
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
    }
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('net.sf.proguard:proguard-gradle') with module('com.guardsquare:proguard-gradle:7.0.0')
            }
        }
    }
}
/**
 * Копия либ для ProGuard
 */
List<File> getProGuardDependencies() {
    File libFolder = new File(rootProject.getProjectDir(), "libs")
    delete libFolder
    Set<ResolvedArtifact> compileOnly = new HashSet<>()
    Set<ResolvedArtifact> runTime = new HashSet<>()
    allprojects.each { pro ->
        pro.configurations.compileOnly.resolvedConfiguration.resolvedArtifacts.each {
            compileOnly.add(it)
        }
        pro.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
            runTime.add(it)
        }
    }
    compileOnly.removeIf({ a ->
        if (a.id.componentIdentifier.displayName.contains("project :")) {
            return true
        } else {
            return runTime
                    .stream()
                    .anyMatch({ rA ->
                        a.name == rA.name
                    })
        }
    })
    return compileOnly.collect { a ->
        a.getFile()
    }

}


task proguard(type: ProGuardTask) {
    def libs = getProGuardDependencies()
    println(libs)
    configuration("conf.pro")
    libraryjars libs
    injars configurations.archives.allArtifacts.first().file
    outjars 'VkChat_minifed.jar'

}
// Настройки для всех проектов
import org.apache.tools.ant.filters.ReplaceTokens

allprojects {

    apply plugin: 'java'
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.jetbrains:annotations:16.0.2'
    }

    group = 'ru.spliterash'
    version = '3.0'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            filter ReplaceTokens, tokens: [version: version]
        }
    }

}

subprojects {
    dependencies {
        compileOnly parent
    }
    jar {
        from {
            def projectClasses = configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
            def subProject = subprojects.collect { p ->
                p.jar.outputs.files.getFiles().collect {
                    it.isDirectory() ? it : zipTree(it)
                }
            }
            return projectClasses + subProject
        }.exclude('META-INF', 'META-INF/**')
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compileOnly 'com.google.code.gson:gson:2.8.6'
//    compile 'org.apache.httpcomponents:httpmime:4.5.8'
    compileOnly 'log4j:log4j:1.2.17'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.13.3'
}
String jarName = 'VkChat'
File jarFolder = file("$rootDir/jars/")
task createFatJar(type: Jar) {
    dependsOn allprojects.build
    destinationDirectory = jarFolder
    archiveFileName = jarName + ".jar"
    from {
        def projectClasses = configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        def subProject = subprojects.collect { p ->
            p.jar.outputs.files.getFiles().collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        return projectClasses + subProject
    }
    exclude('META-INF', 'META-INF/**')
    with jar
}
evaluationDependsOnChildren()
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
    }
}

List<File> getProGuardDependencies() {
    File libFolder = new File(rootProject.getProjectDir(), "libs")
    delete libFolder
    Set<ResolvedArtifact> compileOnly = new HashSet<>()
    Set<ResolvedArtifact> runTime = new HashSet<>()
    allprojects.each { pro ->
        pro.configurations.compileOnly.resolvedConfiguration.resolvedArtifacts.each {
            compileOnly.add(it)
        }
        pro.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
            runTime.add(it)
        }
    }
    compileOnly.removeIf({ a ->
        if (a.id.componentIdentifier.displayName.contains("project :")) {
            return true
        } else {
            return runTime
                    .stream()
                    .anyMatch({ rA ->
                        a.name == rA.name
                    })
        }
    })
    return compileOnly.collect { a ->
        a.getFile()
    }
}

task proguard(type: ProGuardTask, dependsOn: createFatJar) {
    def libs = getProGuardDependencies()
    println(libs)
    configuration("conf.pro")
    libraryjars libs
    injars new File(jarFolder, jarName + ".jar")
    outjars new File(jarFolder, jarName + "-minifed.jar")
}
